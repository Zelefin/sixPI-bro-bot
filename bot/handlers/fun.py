import random
import re
from random import randint

from aiogram import Router, flags, types
from aiogram.filters import Command, CommandObject

from bot.misc.parse_numbers import generate_num

fun_router = Router()


def determine_gender(name):
    # Lists of explicit names
    woman_names = ["–ù–∞—Å—Ç–µ–Ω—å–∫–∞"]

    # Women name endings
    women_name_endings = "|".join(
        [
            "sa",
            "—Å–∞",
            "ta",
            "—Ç–∞",
            "—à–∞",
            "sha",
            "–Ω–∞",
            "na",
            "–∏—è",
            "ia",  # existing
            "va",
            "–≤–∞",
            "ya",
            "—è",
            "ina",
            "–∏–Ω–∞",
            "ka",
            "–∫–∞",
            "la",
            "–ª–∞",  # Slavic languages
            "ra",
            "—Ä–∞",
            "sia",
            "—Å–∏—è",
            "ga",
            "–≥–∞",
            "da",
            "–¥–∞",
            "nia",
            "–Ω–∏—è",
            # Slavic languages
            "lie",
            "ly",
            "lee",
            "ley",
            "la",
            "le",
            "ette",
            "elle",
            "anne",  # English language
        ]
    )

    # Check explicit list and name suffixes
    if name in woman_names or re.search(
        f"\w*({women_name_endings})(\W|$)", name, re.IGNORECASE
    ):
        return "woman"
    else:
        return "man"


def select_emoji(length, is_biba):
    # Emojis for bibas, from smallest to largest
    biba_emojis = ["ü•í", "üçå", "üåΩ", "ü•ñ", "üåµ", "üå¥"]

    # Emojis for breasts, from smallest to largest
    breast_emojis = ["üçì", "üçä", "üçé", "ü•≠", "üçâ", "üéÉ"]

    # Select the appropriate list of emojis
    emojis = biba_emojis if is_biba else breast_emojis

    # Select an emoji based on length
    for size, emoji in zip((1, 5, 10, 15, 20, 25), emojis):
        if length <= size:
            return emoji

    # If none of the sizes matched, return the largest emoji
    return emojis[-1]


# Implementing rate limits
@fun_router.message(Command("gay", prefix="!/"))
@flags.rate_limit(limit=120, key="gay")
async def gay(message: types.Message, command: CommandObject):
    """Handler for the /gay command.
    In a humorous and respectful manner, the bot sends a random percentage
    reflecting a playful take on the user's alignment with a random LGBTQ+ orientation.

    Examples:
        /gay
        /gay Sam
    """
    # Reference the original message's author if it's a reply; otherwise, the command user.

    target = (
        command.args
        if command.args
        else (
            message.reply_to_message.from_user.mention_html()
            if message.reply_to_message
            else message.from_user.mention_html()
        )
    )

    percentage = randint(0, 100)

    if percentage > 30:
        phrases = [
            "üåà {username}, —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞–∫–∏–π –≥–µ–π, —â–æ –Ω–∞–≤—ñ—Ç—å —î–¥–∏–Ω–æ—Ä–æ–≥–∏ –∑–∞–∑–¥—Ä—è—Ç—å —Ç–≤–æ—ó–π –≤–µ—Å–µ–ª–∫–æ–≤–æ—Å—Ç—ñ!",
            "üåà –£–≤–∞–≥–∞, —É–≤–∞–≥–∞! {username} –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –æ—Ç—Ä–∏–º—É—î –Ω–∞–≥–æ—Ä–æ–¥—É '–ù–∞–π–±—ñ–ª—å—à –û—á–µ–≤–∏–¥–Ω–∏–π –ì–µ–π –†–æ–∫—É'! üèÜ",
            "üåà {username}, —Ç–≤–æ—è –±—ñ-—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ –ø–æ—Ç—É–∂–Ω–∞, —â–æ —Ç–∏ –º–æ–∂–µ—à –∑–≤–∞–±–∏—Ç–∏ —ñ —Ö–ª–æ–ø—Ü—ñ–≤, —ñ –¥—ñ–≤—á–∞—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–æ!",
            "üåà –¢—Ä–∞–Ω—Å–≥–µ–Ω–¥–µ—Ä–Ω—ñ—Å—Ç—å {username} —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ —Ç–∞–∫–æ–º—É —Ä—ñ–≤–Ω—ñ, —â–æ –Ω–∞–≤—ñ—Ç—å –≥–µ–Ω–¥–µ—Ä–Ω—ñ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–∏ –ø–ª—É—Ç–∞—é—Ç—å—Å—è!",
            "üåà {username}, —Ç–≤–æ—è –∞—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ —Å–∏–ª—å–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å —Å–µ–∫—Å –≤—Ç–æ–º–∏–≤—Å—è –≤—ñ–¥ —Ç–µ–±–µ.",
            "üåà –ö–≤—ñ—Ä-–¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∑—É—î, —â–æ {username} - —Ü–∞—Ä/—Ü–∞—Ä–∏—Ü—è –õ–ì–ë–¢-–≤–µ—á—ñ—Ä–∫–∏! –ì–æ—Ç—É–π—Ç–µ—Å—å –¥–æ —à–æ—É!",
            "üåà {username}, —Ç–≤–æ—è –ø–∞–Ω—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ –≤—Å–µ–æ—Ö–æ–ø–ª—é—é—á–∞, —â–æ –Ω–∞–≤—ñ—Ç—å –∫–∞—Å—Ç—Ä—É–ª—ñ –ø–æ—á—É–≤–∞—é—Ç—å—Å—è –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º–∏.",
            "üåà –ù–æ–≤–∏–Ω–∞ –¥–Ω—è: {username} –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –≤–∏–∑–Ω–∞–Ω–∏–π –Ω–∞–π—Ñ–∞–±—É–ª–æ–∑–Ω—ñ—à–∏–º –≥–µ—î–º –≤ —ñ—Å—Ç–æ—Ä—ñ—ó! üåü",
        ]
    else:
        phrases = [
            "üåà {username}, —Ç–≤–æ—è –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ –±–∞–Ω–∞–ª—å–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å –≤–∞–Ω—ñ–ª—å–Ω–µ –º–æ—Ä–æ–∑–∏–≤–æ –∑–¥–∞—î—Ç—å—Å—è —Ü—ñ–∫–∞–≤—ñ—à–∏–º!",
            "üåà –£–≤–∞–≥–∞, —Å–≤—ñ—Ç! {username} - –Ω–∞–π—Å—Ç—Ä–µ–π—Ç–Ω—ñ—à–∏–π —Å—Ç—Ä–µ–π—Ç –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç—Ä–µ–π—Ç—ñ–≤! –ù–∞–≥–æ—Ä–æ–¥—ñ—Ç—å —Ü—é –ª—é–¥–∏–Ω—É!",
            "üåà {username}, —Ç–≤–æ—è –ª—é–±–æ–≤ –¥–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–∞—Ç—ñ —Ç–∞–∫–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å —Ä–æ–º–∫–æ–º–∏ –∑–∞–∑–¥—Ä—è—Ç—å.",
            "üåà –ì–µ—Ç–µ—Ä–æ-—Ä–∞–¥–∞—Ä –ø–æ–∫–∞–∑—É—î, —â–æ {username} - —Å—É–ø–µ—Ä–∑—ñ—Ä–∫–∞ —Å–≤—ñ—Ç—É –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—ñ–≤! –Ø–∫–∞ –Ω—É–¥—å–≥–∞...",
            "üåà {username}, —Ç–≤–æ—è straight-–µ–Ω–µ—Ä–≥—ñ—è —Ç–∞–∫–∞ –ø–æ—Ç—É–∂–Ω–∞, —â–æ –≤–µ—Å–µ–ª–∫–∞ –≤—Ç–µ–∫–ª–∞ –≤—ñ–¥ —Ç–µ–±–µ –∑—ñ —Å—Ç—Ä–∞—Ö—É.",
            "üåà –ù–æ–≤–∏–Ω–∞ –¥–Ω—è: {username} –≤–∏–∑–Ω–∞–Ω–∏–π –Ω–∞–π–±—ñ–ª—å—à –±–∞–∑–æ–≤–∏–º –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª–æ–º —Ä–æ–∫—É! –í—ñ—Ç–∞—î–º–æ?",
            "üåà {username}, —Ç–≤–æ—è –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ –Ω–µ—Ü—ñ–∫–∞–≤–∞, —â–æ –Ω–∞–≤—ñ—Ç—å —Ç–≤–æ—ó –≥–µ–Ω–∏ –ø–æ–∑—ñ—Ö–∞—é—Ç—å.",
            "üåà –ê–ª–ª–æ, –ø–æ–ª—ñ—Ü—ñ—è —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ñ–≤? –¢–∞–∫, —è —Ö–æ—á—É –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ {username} - –∑–∞–Ω–∞–¥—Ç–æ —Ç–∏–ø–æ–≤–∏–π –≥–µ—Ç–µ—Ä–æ!",
        ]
    # Send the result with a random orientation
    await message.reply(random.choice(phrases).format(username=target))


@fun_router.message(Command("biba", prefix="!/"))
@flags.rate_limit(limit=60, key="fun")
async def biba(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /biba –∏–ª–∏ !biba

    –í –æ—Ç–≤–µ—Ç, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∏–±—ã

    –ü—Ä–∏–º–µ—Ä—ã:
        /biba
        /biba 10
        /biba 1-10
        /biba 10-1
        !biba
        !biba 10
        !biba 1-10
        !biba 10-1
    """
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    command_parse = re.compile(r"(!biba|/biba) ?(-?\d*)?-?(\d+)?")
    parsed = command_parse.match(message.text)
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∏–±—ã –æ—Ç 1 –¥–æ 30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    length = generate_num(parsed.group(2), parsed.group(3), 1, 30)

    # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ–º –º–µ—Ä—è—Ç—å –±–∏–±—É –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –±–∏–±—É —Ç–æ–≥–æ, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    if message.reply_to_message:
        target = message.reply_to_message.from_user.mention_html()
    else:
        target = message.from_user.mention_html()

    gender = determine_gender(message.from_user.first_name)

    # Random chance to switch gender
    switch_chance = 20
    if random.randint(1, 100) <= switch_chance:
        gender = "man" if gender == "woman" else "woman"

    # Select an emoji for the biba or breast
    is_biba = gender == "man"
    emoji = select_emoji(length, is_biba)

    # Send message based on final gender
    if gender == "woman":
        await message.reply(f"{emoji} –£ {target} –≥—Ä—É–¥–∏ {length // 5} —Ä–æ–∑–º—ñ—Ä—É.")
    else:
        # replace with your message for men
        await message.reply(f"{emoji} –£ {target} –±—ñ–±–∞ {length} —Å–º")
